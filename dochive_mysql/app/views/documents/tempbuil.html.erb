<div class="right"><h1>start a new template</h1></div>
<br>
<%= link_to 'return to documents', documents_path, :class=>'likeabutton' %>
<div class="clr"></div>
<hr />

<% @page = Page.where("id = #{params[:id]}").first %>
<%# @assets = Asset.where("page_id = #{@page.id}")#.order("section.id ASC") %>

<% var = "background-image: url(http://localhost:3000#{@page.url}".gsub("/original/img5/","/original/xlarge/")+
"#{@page.filename}".gsub(".png","_xlg.png); "+
"width: #{@page.width*0.4}px; height: #{@page.height*0.4}px;") %>

<div id="canvas" style="<%= var %>"></div>

<script>
$('#submit_me').click(function(event) {
  event.preventDefault();
  var input_code = $('.input_code').val();
  $.getJSON('verify_code/'+input_code+'/<%= @code %>').done(function(data){
    alert(data);
  })
});

function addnote(){
prompt("Pleas");
    $.ajax({
        type: "POST",
        url:SERVER_URL+"/sections/create",
        data: {template_id: 1, name: "xname", yOrigin: 0, xOrigin:0, width: 100, height: 100},
        success: function(data, textStatus, jqXHR) {

        },
        error: function(jqXHR, textStatus, errorThrown) {
            alert("Error=" + errorThrown);
        }
    });
}
function addnzote(){

    $.ajax({

        type: "POST",

        url:SERVER_URL+"api/addNotes/",

        data: {note_text: $('#note_text').val(), note_lat: $('#lat').val(), note_lng: $('#lng')},

        success: function(data, textStatus, jqXHR) {

        },
        error: function(jqXHR, textStatus, errorThrown) {
            alert("Error=" + errorThrown);
        }
    });
}
</script>

<script>


var Paper = can.Control(
    {
        defaults: {
            rect: {
                minWidth: 10,
                minHeight: 10
            }
        }
    },
    {
        /**
         * Initialize
         */
        init: function() {

            // Bind event handlers
            this.element.on('mousedown.paper', $.proxy(this.startDrawRect, this));
        },

        /**
         * Start drawing a rectangle
         *
         * @param   e
         */
        startDrawRect: function(e) {

            // Get canvas offset
            var offset = this.element.offset();
            this.canvasOffsetLeft = offset.left;
            this.canvasOffsetTop = offset.top;

            // Save start positions
            this.drawStartX = e.pageX - this.canvasOffsetLeft;
            this.drawStartY = e.pageY - this.canvasOffsetTop;

            // Create the rectangle
            this.drawingRect = this.createRect(this.drawStartX, this.drawStartY, 0, 0);

            // Bind event handlers
            this.element.on('mousemove.paper', $.proxy(this.drawRect, this));
            this.element.on('mouseup.paper', $.proxy(this.endDrawRect, this));
        },

        /**
         * Draw the rectangle
         *
         * @param   e
         */
        drawRect: function(e) {

            var currentX = e.pageX - this.canvasOffsetLeft;
            var currentY = e.pageY - this.canvasOffsetTop;

            // Calculate the position and size of the rectangle we are drawing
            var position = this.calculateRectPos(this.drawStartX, this.drawStartY, currentX, currentY);

            // Set position and size
            this.drawingRect.css(position);
        },

        /**
         * Finish drawing the rectangle
         *
         * @param   e
         */
        endDrawRect: function(e) {

            var currentX = e.pageX - this.canvasOffsetLeft;
            var currentY = e.pageY - this.canvasOffsetTop;

            // Calculate the position and size of the rectangle we are drawing
            var position = this.calculateRectPos(this.drawStartX, this.drawStartY, currentX, currentY);

            if (position.width < this.options.rect.minWidth || position.height < this.options.rect.minHeight) {

                // The drawn rectangle is too small, remove it
                this.drawingRect.remove();
            }
            else {

                // Set position and size
                this.drawingRect.css(position);

                // The rectangle is big enough, select it
                this.selectRect(this.drawingRect);
				//alert("w: "+position.width+", h:"+position.height+", x:"+currentX+", y:"+currentY);
            }

            // Unbind event handlers
            this.element.off('mousemove.paper');
            this.element.off('mouseup.paper');
			
			var x;
			
			var thing=prompt("Please enter a field name\n[yOrigin: "+this.drawStartY+", xOrigin:"+this.drawStartX+", width:"+(currentX-this.drawStartX)+", height:"+(currentY-this.drawStartY)+"]","something");

			if (person!=null)
			  {
			  //x="" + thing + " will now be forever know as " + "[yOrigin: "+this.drawStartY+", xOrigin:"+this.drawStartX+", width:"+(currentX-this.drawStartX)+", height:"+(currentY-this.drawStartY)+"]";
			  document.getElementById("demo").innerHTML=x;
			  } 
			  addnote()
			var r=confirm("yOrigin: "+this.drawStartY+", xOrigin:"+this.drawStartX+", width:"+(currentX-this.drawStartX)+", height:"+(currentY-this.drawStartY));
			if (r==true)
			  {
			  x="You pressed OK!";
			  	//$.ajax({
			    //	type:'POST', 
			      //  url: '/sections/create', 
			    //    data: $.param({ template_id: 1, name: "xname", yOrigin: 0, xOrigin:0, width: 100, height: 100 })
			    //});
				//$.ajax({
				//    type: "POST",
				//    dataType: "script",
				//    url: '/section/create',
				//    contentType: 'application/json',
				    //data: JSON.stringify({ resource:{pos_y:45,pos_x:50}, _method:'put' })
				//    data: JSON.stringify({ resource:{template_id: 1, name: "xname", yOrigin: 0, xOrigin:0, width: 100, height: 100}, _method:'put' })
				//}).done(function( msg )
				//        {
				//            alert( "Data Saved: " + msg );
				//        });
				document.location.href = "index"
			  }
			else
			  {
			  x="You pressed Cancel!";
			  } 
			  
        },

        /**
         * Create a rectangle
         *
         * @param   x
         * @param   y
         * @param   w
         * @param   h
         */
        createRect: function(x, y, w, h) {

            return $('<div/>').addClass('rect').css({
                left: x,
                top: y,
                width: w,
                height: h
            }).appendTo(this.element);
        },

        /**
         * Select the given rectangle
         *
         * @param   rect
         */
        selectRect: function(rect) {

            // Deselect the previous selected rectangle
            this.selectedRect && this.selectedRect.removeClass('selected');

            // Select the given rectangle
            this.selectedRect = rect;
            this.selectedRect.addClass('selected');
        },

        /**
         * Calculate the start position and size of the rectangle by the mouse coordinates
         *
         * @param   startX
         * @param   startY
         * @param   endX
         * @param   endY
         * @returns {*}
         */
        calculateRectPos: function(startX, startY, endX, endY) {

            var width = endX - startX;
            var height = endY - startY;
            var posX = startX;
            var posY = startY;

            if (width < 0) {
                width = Math.abs(width);
                posX -= width;
            }

            if (height < 0) {
                height = Math.abs(height);
                posY -= height;
            }

            return {
                left: posX,
                top: posY,
                width: width,
                height: height
            };
        }
    }
);

$(function() {
    var paper = new Paper('#canvas', {});
});
</script>

<p id="demo"></p>